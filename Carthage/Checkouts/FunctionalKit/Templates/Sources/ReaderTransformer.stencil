{# GLOBAL MACROS #}
{% macro getFlatMapName type %}{% if type|annotated:"customFlatMap" %}{{ type.annotations.customFlatMap }}{% else %}flatMap{% endif %}{% endmacro %}
{% macro getTypeName type parameter preSecondaryParameter %}{{ type.annotations.concrete }}<{% if type|annotated:"secondaryParameter" %}{% if preSecondaryParameter %}{{ preSecondaryParameter }}.{% endif %}{{ type.annotations.secondaryParameter }},{% endif %}{{ parameter }}>{% endmacro %}
{% macro checkEscaping2 type1 type2 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{% macro checkEscaping3 type1 type2 type3 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% elif type3.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{% macro checkEscaping4 type1 type2 type3 type4 %}{% if type1.annotations.escapingHOF %}@escaping {% elif type2.annotations.escapingHOF %}@escaping {% elif type3.annotations.escapingHOF %}@escaping {% elif type4.annotations.escapingHOF %}@escaping {% endif %}{% endmacro %}
{# TRANSFORMERS #}
{% for type1 in types.protocols|annotated:"monad" %}
{% set type1Concrete %}{% call getTypeName type1 "Output" "ParameterType" %}{% endset %}
extension ReaderType where ParameterType: {{ type1.name }} {
    public func flatMapT <Output> (_ transform: @escaping (ParameterType.ParameterType) -> Reader<EnvironmentType,{{ type1Concrete }}>) -> Reader<EnvironmentType,{{ type1Concrete }}> {
        return Reader<EnvironmentType,{{ type1Concrete }}>.unfold { environment in
            self.run(environment).{% call getFlatMapName type1 %} { transform($0).run(environment) }
        }
    }
}

{% for type2 in types.protocols|annotated:"monad"|annotated:"traversable" %}
{% set type2Concrete %}{% call getTypeName type2 "Output" "ParameterType.ParameterType" %}{% endset %}
{% set type1Concrete %}{% call getTypeName type1 type2Concrete "ParameterType" %}{% endset %}
extension ReaderType where ParameterType: {{ type1.name }}, ParameterType.ParameterType: {{ type2.name }} {
    public func flatMapTT <Output> (_ transform: @escaping (ParameterType.ParameterType.ParameterType) -> Reader<EnvironmentType,{{ type1Concrete }}>) -> Reader<EnvironmentType,{{ type1Concrete }}> {
        return Reader<EnvironmentType,{{ type1Concrete }}>.unfold { environment in
            self.run(environment).flatMapT { transform($0).run(environment) }
        }
    }
}

{% for type3 in types.protocols|annotated:"monad"|annotated:"traversable" %}
{% set type3Concrete %}{% call getTypeName type3 "Output" "ParameterType.ParameterType.ParameterType" %}{% endset %}
{% set type2Concrete %}{% call getTypeName type2 type3Concrete "ParameterType.ParameterType" %}{% endset %}
{% set type1Concrete %}{% call getTypeName type1 type2Concrete "ParameterType" %}{% endset %}
extension ReaderType where ParameterType: {{ type1.name }}, ParameterType.ParameterType: {{ type2.name }}, ParameterType.ParameterType.ParameterType: {{ type3.name }} {
    public func flatMapTTT <Output> (_ transform: @escaping (ParameterType.ParameterType.ParameterType.ParameterType) -> Reader<EnvironmentType,{{ type1Concrete }}>) -> Reader<EnvironmentType,{{ type1Concrete }}> {
        return Reader<EnvironmentType,{{ type1Concrete }}>.unfold { environment in
            self.run(environment).flatMapTT { transform($0).run(environment) }
        }
    }
}

{% endfor %}
{% endfor %}
{% endfor %}
